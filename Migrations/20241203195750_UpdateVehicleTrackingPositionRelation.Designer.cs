// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SincronizacionCoordenadas.Data.db;

#nullable disable

namespace SincronizacionCoordenadas.Migrations
{
    [DbContext(typeof(TrackingContext))]
    [Migration("20241203195750_UpdateVehicleTrackingPositionRelation")]
    partial class UpdateVehicleTrackingPositionRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.InputOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTrackingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTrackingId");

                    b.ToTable("InputOutputs");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EngineTime")
                        .HasColumnType("float");

                    b.Property<DateTime>("GPSTimeLocal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GPSTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("Heading")
                        .HasColumnType("float");

                    b.Property<string>("Ignition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<double>("Odometer")
                        .HasColumnType("float");

                    b.Property<string>("PointOfInterestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointOfInterestUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServerTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<double>("Speed")
                        .HasColumnType("float");

                    b.Property<string>("SpeedMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTrackingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTrackingId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MeasurementSign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadingTimeLocal")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleTrackingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTrackingId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.VehicleTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Imei")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReportedTimeLocal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastReportedTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Uid")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTrackings");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.InputOutput", b =>
                {
                    b.HasOne("SincronizacionCoordenadas.Entity.VehicleTracking", "VehicleTracking")
                        .WithMany("InputOutputs")
                        .HasForeignKey("VehicleTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleTracking");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.Position", b =>
                {
                    b.HasOne("SincronizacionCoordenadas.Entity.VehicleTracking", "VehicleTracking")
                        .WithMany("Positions")
                        .HasForeignKey("VehicleTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleTracking");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.SensorReading", b =>
                {
                    b.HasOne("SincronizacionCoordenadas.Entity.VehicleTracking", "VehicleTracking")
                        .WithMany("SensorReadings")
                        .HasForeignKey("VehicleTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleTracking");
                });

            modelBuilder.Entity("SincronizacionCoordenadas.Entity.VehicleTracking", b =>
                {
                    b.Navigation("InputOutputs");

                    b.Navigation("Positions");

                    b.Navigation("SensorReadings");
                });
#pragma warning restore 612, 618
        }
    }
}
